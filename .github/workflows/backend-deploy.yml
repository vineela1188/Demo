name: Build Image (GitHub-only)
on:
   workflow_dispatch:
   push:
     branches:
          - main # optional: run on push to main
env:
 CODE_REPO: "https://github.com/vineela1188/Demo.git/main" # <-- change to your code repo (owner/repo)
 CODE_PATH: "code-repo" # folder where code will be checked out
 IMAGE_NAME: "my-backend-app" # image name (local to the runner)
 IMAGE_TAG: ${{ github.sha }}

jobs:
 build:
  runs-on: ubuntu-latest
  steps:
  - name: Checkout CI repo (workflow files)
    uses: actions/checkout@v4

  - name: Checkout code repo
    uses: actions/checkout@v4
    with:
     repository: ${{ env.CODE_REPO }}
     path: ${{ env.CODE_PATH }}
     token: ${{ secrets.PERSONAL_ACCESS_TOKEN }} # required if private; remove if public

  - name: Set up Java (for Maven build; optional if Dockerfile builds itself)
    uses: actions/setup-java@v4
    with:
     distribution: temurin
     java-version: '17'

  - name: Build with Maven (optional; useful if Dockerfile expects built artifact)
    working-directory: ${{ env.CODE_PATH }}
    run: |
     mvn -B -DskipTests package

  - name: Set up Docker Buildx & QEMU (optional but recommended)
    uses: docker/setup-buildx-action@v2

  - name: Build Docker image (local, not pushed)
    uses: docker/build-push-action@v4
    with: 
     context: ./${{ env.CODE_PATH }} # code repo is build context
     file: ./${{ env.CODE_PATH }}/Dockerfile # Dockerfile inside code repo
     push: false # don't push anywhere
     tags: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
     load: true # load image into runner's docker

  - name: Save Docker image to tar
    run: |
      docker image inspect ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} >/dev/null
      docker save ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} -o ${{ env.IMAGE_NAME }}-${{ env.IMAGE_TAG }}.tar

  - name: Upload image artifact
    uses: actions/upload-artifact@v4
    with:
      name: docker-image-${{ env.IMAGE_NAME }}-${{ env.IMAGE_TAG }} 
      path: ${{ env.IMAGE_NAME }}-${{ env.IMAGE_TAG }}.tar
